# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

variables:
    azureml.resourceGroup: mlops-demo
    azureml.workspaceName: mlops-mlwrksp
    azureml.location: westeurope
    amlcompute.clusterName: aml-compute
    amlcompute.vmSize: STANDARD_DS2_V2
    amlcompute.minNodes: 0
    amlcompute.maxNodes: 2
    amlcompute.idleSecondsBeforeScaledown: 300
    experiment.name: diabetes_sklearn
    model.name: diabetes_model

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: UsePythonVersion@0
  displayName: 'Use Python 3.6'
  inputs:
    versionSpec: '3.6'
    addToPath: true
    architecture: 'x64'
- task: Bash@3
  displayName: 'Install Python Requirements'
  inputs:
    targetType: filePath
    filePath: 'setup/install_requirements.sh'
    workingDirectory: 'setup'
- script: 'pytest tests/unit/data_test.py'
  displayName: 'Data Quality Check'
- task: AzureCLI@1
  displayName: 'Add AzureML CLI Extension'
  inputs:
    azureSubscription: 'MyAzureSubscription'
    scriptLocation: 'inlineScript'
    inlineScript: 'az extension add -n azure-cli-ml'
- task: AzureCLI@1
  displayName: 'Create Azure ML Service Workspace'
  inputs:
    azureSubscription: 'MyAzureSubscription'
    scriptLocation: 'inlineScript'
    inlineScript: 'az ml workspace create -g $(azureml.resourceGroup) -w $(azureml.workspaceName) -l $(azureml.location) --exist-ok --yes'
- task: AzureCLI@1
  displayName: 'Create Azure ML Compute'
  inputs:
    azureSubscription: 'MyAzureSubscription'
    scriptLocation: 'inlineScript'
    inlineScript: 'az ml computetarget create amlcompute -g $(azureml.resourceGroup) -w $(azureml.workspaceName) -n $(amlcompute.clusterName) -s $(amlcompute.vmSize) --min-nodes $(amlcompute.minNodes) --max-nodes $(amlcompute.maxNodes) --idle-seconds-before-scaledown $(amlcompute.idleSecondsBeforeScaledown)'
- task: Bash@3
  displayName: 'Create Metadata and Models Folder'
  inputs:
    targetType: 'inline'
    script: 'mkdir metadata && mkdir models'
- task: AzureCLI@1
  displayName: 'Train Model'
  inputs:
    azureSubscription: 'MyAzureSubscription'
    scriptLocation: 'inlineScript'
    inlineScript: 'az ml run submit-script -g $(azureml.resourceGroup) -w $(azureml.workspaceName) -e $(experiment.name) --ct $(amlcompute.clusterName) -d conda_dependencies.yml -t ../metadata/run.json train_diabetes.py'
    workingDirectory: 'training'
- task: AzureCLI@1
  displayName: 'Register Model'
  inputs:
    azureSubscription: 'MyAzureSubscription'
    scriptLocation: 'inlineScript'
    inlineScript: 'az ml model register -g $(azureml.resourceGroup) -w $(azureml.workspaceName) -n $(model.name) -f metadata/run.json  --asset-path outputs/models/sklearn_diabetes_model.pkl -d "Linear model using diabetes dataset" --tag "data"="diabetes" --tag "model"="regression" --model-framework ScikitLearn -t metadata/model.json'    
- task: AzureCLI@1
  displayName: 'Download Model'
  inputs:
    azureSubscription: 'MyAzureSubscription'
    scriptLocation: 'inlineScript'
    inlineScript: 'az ml model download -g $(azureml.resourceGroup) -w $(azureml.workspaceName) -i $(jq -r .modelId metadata/model.json) -t ./models --overwrite'    
- task: CopyFiles@2
  displayName: 'Copy files to Artifact Staging Directory'
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)'
    Contents: |
     **/metadata/*
     **/models/*
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
- task: Bash@3
  displayName: 'Display Artifact Staging Directory'
  inputs:
    targetType: 'inline'
    script: 'pwd && ls -laR $(Build.ArtifactStagingDirectory)'
- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
  inputs:
    ArtifactName: 'drop'
    publishLocation: 'Container'
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
